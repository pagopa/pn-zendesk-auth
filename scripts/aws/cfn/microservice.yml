AWSTemplateFormatVersion: 2010-09-09
Description: "Deploy resources for Zendesk SEND integration"

Parameters:
  ProjectName:
    Type: String

  LambdasBucketName:
    Type: String
    Description: "The S3 bucket from which to fetch the templates used by this stack."

  WebApiDnsName:
    Type: String

  BucketBasePath:
    Type: String
    Description: "The S3 bucket base path where lambda functions are stored"

  ZendeskAuthorizerLambdaName:
    Type: String

  ZendeskSecretName:
    Type: String

  PdvSecretName:
    Type: String

  PdvUserRegistryUrl:
    Type: String

Resources:

  ZendeskAuthorizationLambda:
    Type: AWS::Lambda::Function
    Properties:
        FunctionName: !Ref ZendeskAuthorizerLambdaName
        Runtime: nodejs18.x
        Handler: "index.handler"
        Code:
          S3Bucket: !Ref LambdasBucketName
          S3Key: !Sub "${BucketBasePath}/functions_zip/zendeskAuthorizer.zip"
        Environment:
          Variables:
            ZENDESK_SECRET_NAME: !Ref ZendeskSecretName
            PDV_SECRET_NAME: !Ref PdvSecretName
            PDV_USER_REGISTRY_URL: !Ref PdvUserRegistryUrl
        Role: !GetAtt ZendeskAuthorizationLambdaRole.Arn
        Timeout: 10
        TracingConfig:
            Mode: Active
        Layers:
          - !Sub "arn:aws:lambda:${AWS::Region}:325218067255:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"
        # arn:aws:lambda:eu-south-1:325218067255:layer:AWS-Parameters-and-Secrets-Lambda-Extension:11

  ZendeskAuthorizationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
        RoleName: !Sub ${ProjectName}-zendeskAuthorizationLambdaRole
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
        Path: /

  ZendeskAuthorizationLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: !Sub ${ProjectName}-zendeskAuthorizationLambdaPolicy
        Roles:
          - !Ref ZendeskAuthorizationLambdaRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:aes128-1a2b3c


  ZendeskAuthorizationRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ProjectName}-zendesk-authorization-api"
      FailOnWarnings: true
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  ZendeskAuthorizationRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ZendeskAuthorizationPostMethod
      - ZendeskAuthorizationOptionsMethod
    Properties:
      RestApiId: !Ref ZendeskAuthorizationRestApi

  ZendeskAuthorizationRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ZendeskAuthorizationRestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref ZendeskAuthorizationRestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt "ZendeskAuthorizationApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","errorMessage":"$context.error.message","validationError":"$context.error.validationErrorString","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: "true"
          DataTraceEnabled: "false"
          LoggingLevel: "INFO"

  ZendeskAuthorizationApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: "zendesk-authorization"
      DomainName: !Ref WebApiDnsName
      RestApiId: !Ref ZendeskAuthorizationRestApi
      Stage: !Ref ZendeskAuthorizationRestApiStage

  ZendeskAuthorizationLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ZendeskAuthorizationLambda
      - ZendeskAuthorizationRestApi
    Properties:
      FunctionName: !Ref ZendeskAuthorizerLambdaName
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ZendeskAuthorizationRestApi}/*/POST/"

  ZendeskAuthorizationPostMethod:
    DependsOn: ZendeskAuthorizationLambda
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: "Proxy to zendesk authorization Lambda"
      RestApiId: !Ref ZendeskAuthorizationRestApi
      ResourceId: !GetAtt ZendeskAuthorizationRestApi.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestValidatorId: !Ref ZendeskAuthorizationPostMethodRequestValidator
      RequestParameters:
        "method.request.header.Origin": true
      RequestModels:
        "application/json": !Ref ZendeskAuthorizationModel
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ZendeskAuthorizerLambdaName}/invocations"
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000

  ZendeskAuthorizationPostMethodRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref ZendeskAuthorizationRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: true

  ZendeskAuthorizationModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      RestApiId: !Ref ZendeskAuthorizationRestApi
      ContentType: application/json
      Description: Schema for zendesk authorization body
      Name: ZendeskAuthorizationModel
      Schema:
        type: object
        required:
          - email
        properties:
          email:
            type: string
            pattern: ^([a-zA-Z0-9]+(?:[.\-_][a-zA-Z0-9]+){0,10}@[a-zA-Z0-9]+(?:[.-][a-zA-Z0-9]+){0,10}(?:\.[a-zA-Z0-9]{2,10}))$
            maxLength: 320


  ZendeskAuthorizationOptionsMethod:
    DependsOn: ZendeskAuthorizationLambda
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: "Options for zendesk authorization"
      RestApiId: !Ref ZendeskAuthorizationRestApi
      ResourceId: !GetAtt ZendeskAuthorizationRestApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: MOCK
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""